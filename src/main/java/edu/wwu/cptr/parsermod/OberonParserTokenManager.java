package edu.wwu.cptr.parsermod;

/* OberonParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. OberonParserTokenManager.java */

/** Token Manager. */
@SuppressWarnings("unused")public class OberonParserTokenManager implements OberonParserConstants {
  static int commentNesting;

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffe00L) != 0L)
         {
            jjmatchedKind = 52;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0xfbf9e5f7600L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0x4061a08800L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0xdbf824b3600L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 2;
            }
            return 1;
         }
         if ((active0 & 0x2001c144000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x8a002091000L) != 0L)
            return 1;
         if ((active0 & 0x51f88422600L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x50000022600L) != 0L)
            return 1;
         if ((active0 & 0x1f88400000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x380000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x1c08400000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x280000000L) != 0L)
            return 1;
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 70);
      case 38:
         return jjStopAtPos(0, 77);
      case 40:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L);
      case 41:
         return jjStopAtPos(0, 63);
      case 42:
         return jjStopAtPos(0, 75);
      case 43:
         return jjStopAtPos(0, 65);
      case 44:
         return jjStopAtPos(0, 57);
      case 45:
         return jjStopAtPos(0, 66);
      case 46:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 47:
         return jjStopAtPos(0, 76);
      case 58:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 55);
      case 60:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 61:
         return jjStopAtPos(0, 59);
      case 62:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0xc00L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x3000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0xc000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0xf0000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x1e00000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0xc000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x60000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x380000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1c00000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0xe000000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0xc0000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 78);
      case 93:
         return jjStopAtPos(0, 79);
      case 94:
         return jjStopAtPos(0, 61);
      case 123:
         return jjStopAtPos(0, 68);
      case 124:
         return jjStopAtPos(0, 64);
      case 125:
         return jjStopAtPos(0, 69);
      case 126:
         return jjStopAtPos(0, 67);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 46:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         break;
      case 61:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000001000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000400L, active1, 0L);
      case 70:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 1);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 1);
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x42000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80010004000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 78:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x10000040000L, active1, 0L);
      case 79:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x8e102000L, active1, 0L);
      case 82:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(1, 30, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x300000200L, active1, 0L);
      case 83:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 1);
         break;
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 89:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L);
      case 68:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 1);
         else if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x40080080000L);
      case 76:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 1);
         break;
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x302000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x8800400000L);
      case 82:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 1);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x31000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x91000000000L);
      case 86:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 69:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 1);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 72:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 1);
         break;
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000020400L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 78:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x400400000L);
      case 80:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 1);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 84:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 1);
         break;
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 69:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 70:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 1);
         break;
      case 76:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 78:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 1);
         break;
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x1600400000L);
      case 84:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 89:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 68:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 69:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 78:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 1);
         break;
      case 84:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 1);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 77:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 1);
         break;
      case 82:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 1);
         break;
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     { jjCheckNAddStates(0, 8); }
                  }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(6, 7); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 4:
                  if (curChar == 34 && kind > 54)
                     kind = 54;
                  break;
               case 5:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 6:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 7:
                  if (curChar == 39 && kind > 54)
                     kind = 54;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAddStates(0, 8); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(9, 11); }
                  break;
               case 10:
                  if (curChar == 46 && kind > 45)
                     kind = 45;
                  break;
               case 11:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAdd(12); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if (curChar != 46)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(20); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  { jjCheckNAdd(20); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(21, 22); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  { jjAddStates(9, 10); }
                  break;
               case 6:
                  { jjAddStates(11, 12); }
                  break;
               case 13:
                  if ((0x7eL & l) != 0L)
                     { jjAddStates(13, 14); }
                  break;
               case 14:
                  if (curChar == 72 && kind > 49)
                     kind = 49;
                  break;
               case 18:
                  if ((0x30L & l) != 0L)
                     { jjAddStates(15, 16); }
                  break;
               case 21:
                  if ((0x7eL & l) != 0L)
                     { jjAddStates(17, 18); }
                  break;
               case 22:
                  if (curChar == 88 && kind > 53)
                     kind = 53;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(9, 10); }
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(11, 12); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_1(0x80L);
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   9, 11, 12, 13, 14, 15, 16, 21, 22, 3, 4, 6, 7, 13, 14, 19, 
   20, 21, 22, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\101\122\122\101\131", 
"\102\105\107\111\116", "\102\131", "\103\101\123\105", "\103\117\116\123\124", "\104\111\126", 
"\104\117", "\105\114\123\105", "\105\114\123\111\106", "\105\116\104", 
"\105\130\111\124", "\106\117\122", "\111\106", "\111\115\120\117\122\124", "\111\116", 
"\111\123", "\114\117\117\120", "\115\117\104", "\115\117\104\125\114\105", 
"\116\111\114", "\117\106", "\117\122", "\120\117\111\116\124\105\122", 
"\120\122\117\103\105\104\125\122\105", "\120\122\117\107\122\101\115", "\122\105\103\117\122\104", 
"\122\105\120\105\101\124", "\122\105\124\125\122\116", "\124\110\105\116", "\124\117", 
"\124\131\120\105", "\125\116\124\111\114", "\126\101\122", "\127\110\111\114\105", 
"\127\111\124\110", "\56\56", null, null, null, null, null, null, null, null, null, null, "\73", 
"\56", "\54", "\72\75", "\75", "\72", "\136", "\50", "\51", "\174", "\53", "\55", 
"\176", "\173", "\175", "\43", "\74", "\74\75", "\76", "\76\75", "\52", "\57", "\46", 
"\133", "\135", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 6)
         {
            jjmatchedKind = 6;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
          commentNesting=1;
         break;
      case 7 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
             commentNesting++;
         break;
      case 8 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
             commentNesting--; if (commentNesting==0) SwitchTo(DEFAULT);
         break;
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 45 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    // Create the new token and initialise its fields properly
    Token newTok = new Token();
    newTok.kind = DOTDOT;
    newTok.beginLine = newTok.endLine = matchedToken.endLine;
    newTok.beginColumn = matchedToken.endColumn-1;
    newTok.endColumn = matchedToken.endColumn;
    newTok.image="..";
    newTok.next =  matchedToken.next;
    newTok.specialToken = null;
    // Now fix up matchedToken:
    matchedToken.kind = INTEGER;
    matchedToken.endColumn -= 2;
    matchedToken.image = matchedToken.image.substring(0,matchedToken.image.length()-2);
    matchedToken.next = newTok;
         break;
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public OberonParserTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public OberonParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  static public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfff63ffffffffe01L, 0xffffL, 
};
static final long[] jjtoSkip = {
   0x1beL, 0x0L, 
};
static final long[] jjtoMore = {
   0x40L, 0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[23];
    static private final int[] jjstateSet = new int[2 * 23];

    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    
    static protected char curChar;
}
