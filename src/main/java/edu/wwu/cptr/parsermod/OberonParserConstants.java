package edu.wwu.cptr.parsermod;

/* Generated By:JavaCC: Do not edit this line. OberonParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface OberonParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ARRAY = 9;
  /** RegularExpression Id. */
  int BEGIN = 10;
  /** RegularExpression Id. */
  int BY = 11;
  /** RegularExpression Id. */
  int CASE = 12;
  /** RegularExpression Id. */
  int CONST = 13;
  /** RegularExpression Id. */
  int DIV = 14;
  /** RegularExpression Id. */
  int DO = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int ELSIF = 17;
  /** RegularExpression Id. */
  int END = 18;
  /** RegularExpression Id. */
  int EXIT = 19;
  /** RegularExpression Id. */
  int FOR = 20;
  /** RegularExpression Id. */
  int IF = 21;
  /** RegularExpression Id. */
  int IMPORT = 22;
  /** RegularExpression Id. */
  int IN = 23;
  /** RegularExpression Id. */
  int IS = 24;
  /** RegularExpression Id. */
  int LOOP = 25;
  /** RegularExpression Id. */
  int MOD = 26;
  /** RegularExpression Id. */
  int MODULE = 27;
  /** RegularExpression Id. */
  int NIL = 28;
  /** RegularExpression Id. */
  int OF = 29;
  /** RegularExpression Id. */
  int OR = 30;
  /** RegularExpression Id. */
  int POINTER = 31;
  /** RegularExpression Id. */
  int PROCEDURE = 32;
  /** RegularExpression Id. */
  int PROGRAM = 33;
  /** RegularExpression Id. */
  int RECORD = 34;
  /** RegularExpression Id. */
  int REPEAT = 35;
  /** RegularExpression Id. */
  int RETURN = 36;
  /** RegularExpression Id. */
  int THEN = 37;
  /** RegularExpression Id. */
  int TO = 38;
  /** RegularExpression Id. */
  int TYPE = 39;
  /** RegularExpression Id. */
  int UNTIL = 40;
  /** RegularExpression Id. */
  int VAR = 41;
  /** RegularExpression Id. */
  int WHILE = 42;
  /** RegularExpression Id. */
  int WITH = 43;
  /** RegularExpression Id. */
  int DOTDOT = 44;
  /** RegularExpression Id. */
  int DIGIT_DOT_HACK = 45;
  /** RegularExpression Id. */
  int DIGIT = 46;
  /** RegularExpression Id. */
  int SCALEFACTOR = 47;
  /** RegularExpression Id. */
  int HEXDIGIT = 48;
  /** RegularExpression Id. */
  int INTEGER = 49;
  /** RegularExpression Id. */
  int REAL = 50;
  /** RegularExpression Id. */
  int LETTER = 51;
  /** RegularExpression Id. */
  int IDENT = 52;
  /** RegularExpression Id. */
  int CHARACTER = 53;
  /** RegularExpression Id. */
  int STRING = 54;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"(*\"",
    "<token of kind 6>",
    "\"(*\"",
    "\"*)\"",
    "\"ARRAY\"",
    "\"BEGIN\"",
    "\"BY\"",
    "\"CASE\"",
    "\"CONST\"",
    "\"DIV\"",
    "\"DO\"",
    "\"ELSE\"",
    "\"ELSIF\"",
    "\"END\"",
    "\"EXIT\"",
    "\"FOR\"",
    "\"IF\"",
    "\"IMPORT\"",
    "\"IN\"",
    "\"IS\"",
    "\"LOOP\"",
    "\"MOD\"",
    "\"MODULE\"",
    "\"NIL\"",
    "\"OF\"",
    "\"OR\"",
    "\"POINTER\"",
    "\"PROCEDURE\"",
    "\"PROGRAM\"",
    "\"RECORD\"",
    "\"REPEAT\"",
    "\"RETURN\"",
    "\"THEN\"",
    "\"TO\"",
    "\"TYPE\"",
    "\"UNTIL\"",
    "\"VAR\"",
    "\"WHILE\"",
    "\"WITH\"",
    "\"..\"",
    "<DIGIT_DOT_HACK>",
    "<DIGIT>",
    "<SCALEFACTOR>",
    "<HEXDIGIT>",
    "<INTEGER>",
    "<REAL>",
    "<LETTER>",
    "<IDENT>",
    "<CHARACTER>",
    "<STRING>",
    "\";\"",
    "\".\"",
    "\",\"",
    "\":=\"",
    "\"=\"",
    "\":\"",
    "\"^\"",
    "\"(\"",
    "\")\"",
    "\"|\"",
    "\"+\"",
    "\"-\"",
    "\"~\"",
    "\"{\"",
    "\"}\"",
    "\"#\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"[\"",
    "\"]\"",
  };

}
